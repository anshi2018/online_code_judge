/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package onlinejudge1;

import com.sun.corba.se.spi.activation.Server;
import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author rashi
 */

public class ClientWork extends javax.swing.JFrame implements Runnable{

    /**
     * Creates new form ClientWork
     */
    Socket sock;
    public ClientWork() {
        initComponents();
    }
    
    public ClientWork(Socket x)
    {
        initComponents();
        sock=x;
        // username=user;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientWork.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientWork.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientWork.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientWork.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClientWork().setVisible(true);
            }
        });
    }
    String username="Rachna";
    String code="";
    PrintWriter out=null;
    Scanner input=null;
    String Lang="";
    String Problem="";
    int i,j,ind,flag=0;
    int temp=0;
     public void check() throws IOException, FileNotFoundException, InterruptedException
    {
        while(true)
        {
            try { 
                receive();
                System.out.println("hello im in while l");
                //System.out.println(input.hasNext()+""+flag);
                if(temp==1)
                {
                    temp=0;
                    System.out.println("how r u??");
                     if(flag==1)
        {
            FileOutputStream out = null;
            if(Lang.equalsIgnoreCase("C"))
            {
             out = new FileOutputStream("/home/rashi/softa/Main_"+username+".c");   
            }
            else if(Lang.equalsIgnoreCase("C++"))
            {
             out = new FileOutputStream("/home/rashi/softa/Main("+username+").cpp");      
            }
            else if(Lang.equalsIgnoreCase("JAVA"))
            {
              out = new FileOutputStream("/home/rashi/softa/Main("+username+").java");   
            }
          DataOutputStream ob=new DataOutputStream(out);
          ob.writeBytes(code);
        boolean b= compile(Lang);
          if(b==false)
              System.out.println("Compilation error");
          else
              System.out.println("Compiled successfully"); 
         out.close();
         code="";
        }
                }
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(ClientWork.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    public  boolean compile(String l) throws IOException, InterruptedException
   {
        System.out.println("Code compilation started...");
        ProcessBuilder p;
        boolean compiled = true;
        if (l.equals("java")) {
            p = new ProcessBuilder("javac", "Main("+username+").java");
        } else if (l.equals("c")) {
            p = new ProcessBuilder("gcc","-std=c++0x","-w","-o", "Main", "/home/rashi/softa/Main_"+username+".c");
        } else {
            p = new ProcessBuilder("g++","-std=c++0x","-w", "-o", "Main", "Main("+username+").cpp");
        }
   //  p.directory(new File("/home/rashi"));
       //System.out.println(System.getProperty("/home/rashi"));
     
        p.redirectErrorStream(true);
        
      
            Process pp = p.start();
            InputStream is = pp.getInputStream();
            String temp;

           BufferedReader b = new BufferedReader(new InputStreamReader(is)) ;
                while ((temp = b.readLine()) != null) {
                    compiled = false;
                    System.out.println(temp);
                }
                pp.waitFor();
           
      
            
        
            if (!compiled) {
                is.close();
                return false;
            }
            is.close();
            return true;



      
    }
  
public void receive() throws ClassNotFoundException, FileNotFoundException, IOException, InterruptedException
    {
        System.out.println("hello im in recieve function");
        if(input.hasNext())
        {
            System.out.println("hello im in input.hasnext");
            String Message = input.nextLine();
            System.out.println("In serevr"+" "+Message);
            if(Message.startsWith("?"))
            {
                flag=1;
                System.out.println("Starting#");
                ind=Message.indexOf('$');
                System.out.println("ind="+ind);
                Lang=Message.substring(1, ind);
                i=ind;
                ind=Message.indexOf('!');
                Problem=Message.substring(i+1, ind);
                code=code+Message.substring(ind+1);
                code=code+"\n";
                System.out.println("Language="+" "+Lang+" "+"Problem code="+Problem+" "+"code="+code);      
             /*   
               Class.forName("com.mysql.jdbc.Driver");
                try {
                    Connection con=(Connection) DriverManager.getConnection("jdbc:mysql://localhost:3307/softa","root", "20inaheg08u");
                } catch (SQLException ex) {
                    Logger.getLogger(ClientWork.class.getName()).log(Level.SEVERE, null, ex);
                }*/
              //COMPLETE DB CODE
            }
            else{
                if(Message.endsWith("@"))
                {
                    temp=1;
                    int len=Message.length();
                   String newmsg=Message.substring(0,len-1 );
                   code=code+newmsg;
                   code=code+"\n";
                }
                else
                {
                System.out.println("hello im in else");
                code=code+Message;
                code=code+"\n";
                System.out.println(code);
                }
            }
           
          
        }
        else
        {
            System.out.println("hello im in else of input.hasnext");
        }
        System.out.println("end of recieve");
        
    }

    @Override
    public void run() {
    /*    try {
            Class.forName("com.mysql.jdbc.Driver");
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ClientWork.class.getName()).log(Level.SEVERE, null, ex);
        }
                try {
                    Connection con=(Connection) DriverManager.getConnection("jdbc:mysql://localhost:3307/Judge","", "");
                } catch (SQLException ex) {
                    Logger.getLogger(ClientWork.class.getName()).log(Level.SEVERE, null, ex);
                }*/
        try {
            input=new Scanner(sock.getInputStream());
        } catch (IOException ex) {
            Logger.getLogger(ClientWork.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            out= new PrintWriter(sock.getOutputStream());
        } catch (IOException ex) {
            Logger.getLogger(ClientWork.class.getName()).log(Level.SEVERE, null, ex);
        }
        out.flush();
        try {
            check();
        } catch (IOException ex) {
            Logger.getLogger(ClientWork.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InterruptedException ex) {
            Logger.getLogger(ClientWork.class.getName()).log(Level.SEVERE, null, ex);
        }
    
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
